{
  "openapi": "3.1.0",
  "servers": [
    {
      "description": "Dev",
      "url": "http://localhost:3000/dev"
    },
    {
      "description": "Sandbox",
      "url": "https://api.sand.gratr.devy"
    },
    {
      "description": "Staging",
      "url": "https://api.stage.gratr.dev"
    },
    {
      "description": "Production",
      "url": "https://api.gratr.dev"
    }
  ],
  "info": {
    "description": "The API driving GRatr, the best tool to rate, review and select GitHub repositories.",
    "version": "0.1.0",
    "title": "GRatr REST API",
    "contact": {
      "email": "troy.forster@gmail.com",
      "name": "Troy Forster",
      "url": "https://www.tforster.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://www.gratr.dev/license"
    }
  },
  "tags": [
    {
      "name": "auth",
      "description": "Authentication and authorisation"
    },
    {
      "name": "rating",
      "description": "Operations related to creating, updating and retrieving repository ratings"
    }
  ],
  "paths": {
    "/auth/tokens": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "tokens",
        "summary": "Sign in with GitHub",
        "description": "Uses GitHub oAuth2 Authorisation Code Grant flow to exchange a GitHub access_token for a GRatr JWT and refresh token.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tokensPostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/tokensPost"
          },
          "400": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/auth/refreshtoken": {
      "post": {
        "tags": [
          "auth"
        ],
        "operationId": "refreshtoken",
        "summary": "Refresh token",
        "description": "Refresh token",
        "responses": {
          "204": {
            "$ref": "#/components/responses/CreatedNoContent"
          },
          "400": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/organisations/{organisation}/{repository}": {
      "post": {
        "tags": [
          "rating"
        ],
        "operationId": "createRepositoryRating",
        "summary": "Create a new repository rating record",
        "description": "Creates a new repository rating record ready attributed to the provided user Id. If the user has an existing record for this repository then the operation is converted to an update effectively changing their previous values to the provided values.\n",
        "parameters": [
          {
            "in": "path",
            "name": "organisation",
            "description": "The GitHub organisation name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisationName"
            }
          },
          {
            "in": "path",
            "name": "repository",
            "description": "The GitHub repository name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/repositoryName"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/organisationsOrganisationRepositoryPost"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/CreatedNoContent"
          },
          "400": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "get": {
        "tags": [
          "rating"
        ],
        "operationId": "readRepositoryRating",
        "summary": "Read all repository ratings",
        "description": "Returns an array of all UGC ratings for this repository\n",
        "parameters": [
          {
            "in": "path",
            "name": "organisation",
            "description": "The GitHub organisation name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/organisationName"
            }
          },
          {
            "in": "path",
            "name": "repository",
            "description": "The GitHub repository name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/repositoryName"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/readRepositoryRating"
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "GitHub": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "gitHubAccessToken": {
        "description": "A token returned from a successful GitHub oAuth2 Authorisation Code Grant flow",
        "type": "string",
        "example": "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"
      },
      "tokensPostRequest": {
        "type": "object",
        "properties": {
          "access_token": {
            "$ref": "#/components/schemas/gitHubAccessToken"
          }
        },
        "additionalProperties": false
      },
      "jwt": {
        "description": "JSON Web Token",
        "type": "object"
      },
      "refreshToken": {
        "description": "A token that can be exchanged for a JWT without logging in a again",
        "type": "string",
        "example": "tbd"
      },
      "organisationName": {
        "description": "The name of the GitHub organisation",
        "type": "string",
        "example": "tforster"
      },
      "repositoryName": {
        "description": "The name of the GitHub repository",
        "type": "string",
        "example": "joy"
      },
      "aggregateName": {
        "type": "string",
        "description": "The name of the aggregate value",
        "example": "Median"
      },
      "aggregateDescription": {
        "type": "string",
        "description": "The description of the aggregate value",
        "example": "The median is defined as the number in the middle of a given set of numbers arranged in order of increasing magnitude."
      },
      "aggregateValue": {
        "type": "number",
        "description": "The aggregate value",
        "example": 2.3
      },
      "aggregateObject": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/aggregateName"
          },
          "description": {
            "$ref": "#/components/schemas/aggregateDescription"
          },
          "value": {
            "$ref": "#/components/schemas/aggregateValue"
          }
        },
        "additionalProperties": false
      },
      "ratingDescription": {
        "type": "string",
        "description": "The description of a rating",
        "example": "Is the documentation comprehensive? Is it accurate? Does search work or do you have to use Google to search these docs? Can you control how links open (e.g. in same tab or new tab)."
      },
      "username": {
        "type": "string",
        "description": "The GitHub username",
        "example": "tforster"
      },
      "avatar": {
        "type": "string",
        "format": "uri",
        "description": "The URL to the GitHub users avatar",
        "example": "https://avatars.githubusercontent.com/u/121533?v=4"
      },
      "createdAt": {
        "type": "string",
        "format": "date-time",
        "description": "The date the record was created",
        "example": "2021-12-29T23:38:24.714Z"
      },
      "updatedAt": {
        "type": "string",
        "format": "date-time",
        "description": "The date the record was last updated",
        "example": "2021-12-29T23:38:24.714Z"
      },
      "ratingValue": {
        "type": "number",
        "description": "The value of a rating object",
        "example": 2.3
      },
      "ratingComment": {
        "type": "string",
        "description": "The optional comment associated with a UGC rating",
        "example": "GRatr is *awesome*\\n\\nAnd supports MarkDown too!"
      },
      "organisationsOrganisationRepositoryPost": {
        "type": "object",
        "properties": {
          "documentation": {
            "$ref": "#/components/schemas/ratingValue"
          },
          "usage": {
            "$ref": "#/components/schemas/ratingValue"
          },
          "quality": {
            "$ref": "#/components/schemas/ratingValue"
          },
          "cost": {
            "$ref": "#/components/schemas/ratingValue"
          },
          "learning": {
            "$ref": "#/components/schemas/ratingValue"
          },
          "comment": {
            "$ref": "#/components/schemas/ratingComment"
          }
        },
        "additionalProperties": false
      }
    },
    "responses": {
      "tokensPost": {
        "description": "Success. JWT and refreshToken created.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "jwt": {
                  "$ref": "#/components/schemas/jwt"
                },
                "refreshToken": {
                  "$ref": "#/components/schemas/refreshToken"
                }
              },
              "additionalProperties": false
            }
          }
        }
      },
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "details": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          }
        }
      },
      "CreatedNoContent": {
        "description": "Created. No content."
      },
      "readRepositoryRating": {
        "description": "Success. Ratings returned.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "organisationName": {
                  "$ref": "#/components/schemas/organisationName"
                },
                "repositoryName": {
                  "$ref": "#/components/schemas/repositoryName"
                },
                "aggregates": {
                  "type": "object",
                  "description": "A hash of aggregated metrics such as mean, mode, etc.",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/aggregateObject"
                  }
                },
                "descriptions": {
                  "type": "object",
                  "description": "A hash of descriptions for each of the ratings found in ratings.values below.",
                  "properties": {
                    "documentation": {
                      "$ref": "#/components/schemas/ratingDescription"
                    },
                    "usage": {
                      "$ref": "#/components/schemas/ratingDescription"
                    },
                    "quality": {
                      "$ref": "#/components/schemas/ratingDescription"
                    },
                    "cost": {
                      "$ref": "#/components/schemas/ratingDescription"
                    },
                    "learning": {
                      "$ref": "#/components/schemas/ratingDescription"
                    },
                    "comment": {
                      "$ref": "#/components/schemas/ratingDescription"
                    }
                  },
                  "additionalProperties": false
                },
                "nextPageToken": {
                  "type": "string",
                  "description": "Somewhat tbd but a placeholder for aiding pagination of larger datasets"
                },
                "ratings": {
                  "type": "array",
                  "description": "An array of UGC ratings including user information and rating values.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "username": {
                        "$ref": "#/components/schemas/username"
                      },
                      "avatar": {
                        "$ref": "#/components/schemas/avatar"
                      },
                      "createdAt": {
                        "$ref": "#/components/schemas/createdAt"
                      },
                      "updatedAt": {
                        "$ref": "#/components/schemas/updatedAt"
                      },
                      "values": {
                        "type": "object",
                        "description": "Hash of each rating value by this user",
                        "properties": {
                          "documentation": {
                            "$ref": "#/components/schemas/ratingValue"
                          },
                          "usage": {
                            "$ref": "#/components/schemas/ratingValue"
                          },
                          "quality": {
                            "$ref": "#/components/schemas/ratingValue"
                          },
                          "cost": {
                            "$ref": "#/components/schemas/ratingValue"
                          },
                          "learning": {
                            "$ref": "#/components/schemas/ratingValue"
                          },
                          "comment": {
                            "$ref": "#/components/schemas/ratingComment"
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                }
              },
              "additionalProperties": false
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "resourceNotFound": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          }
        }
      }
    }
  }
}